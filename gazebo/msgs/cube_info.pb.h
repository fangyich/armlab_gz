// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cube_info.proto

#ifndef PROTOBUF_cube_5finfo_2eproto__INCLUDED
#define PROTOBUF_cube_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
// @@protoc_insertion_point(includes)

namespace cube_info_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cube_5finfo_2eproto();
void protobuf_AssignDesc_cube_5finfo_2eproto();
void protobuf_ShutdownFile_cube_5finfo_2eproto();

class CubeInfo;

// ===================================================================

class CubeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cube_info_msgs.msgs.CubeInfo) */ {
 public:
  CubeInfo();
  virtual ~CubeInfo();

  CubeInfo(const CubeInfo& from);

  inline CubeInfo& operator=(const CubeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CubeInfo& default_instance();

  void Swap(CubeInfo* other);

  // implements Message ----------------------------------------------

  inline CubeInfo* New() const { return New(NULL); }

  CubeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CubeInfo& from);
  void MergeFrom(const CubeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CubeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .gazebo.msgs.Pose cube_pose = 2;
  bool has_cube_pose() const;
  void clear_cube_pose();
  static const int kCubePoseFieldNumber = 2;
  const ::gazebo::msgs::Pose& cube_pose() const;
  ::gazebo::msgs::Pose* mutable_cube_pose();
  ::gazebo::msgs::Pose* release_cube_pose();
  void set_allocated_cube_pose(::gazebo::msgs::Pose* cube_pose);

  // @@protoc_insertion_point(class_scope:cube_info_msgs.msgs.CubeInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cube_pose();
  inline void clear_has_cube_pose();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::gazebo::msgs::Pose* cube_pose_;
  friend void  protobuf_AddDesc_cube_5finfo_2eproto();
  friend void protobuf_AssignDesc_cube_5finfo_2eproto();
  friend void protobuf_ShutdownFile_cube_5finfo_2eproto();

  void InitAsDefaultInstance();
  static CubeInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CubeInfo

// required string id = 1;
inline bool CubeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CubeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CubeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CubeInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CubeInfo::id() const {
  // @@protoc_insertion_point(field_get:cube_info_msgs.msgs.CubeInfo.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CubeInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cube_info_msgs.msgs.CubeInfo.id)
}
inline void CubeInfo::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cube_info_msgs.msgs.CubeInfo.id)
}
inline void CubeInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cube_info_msgs.msgs.CubeInfo.id)
}
inline ::std::string* CubeInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cube_info_msgs.msgs.CubeInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CubeInfo::release_id() {
  // @@protoc_insertion_point(field_release:cube_info_msgs.msgs.CubeInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CubeInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cube_info_msgs.msgs.CubeInfo.id)
}

// required .gazebo.msgs.Pose cube_pose = 2;
inline bool CubeInfo::has_cube_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CubeInfo::set_has_cube_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CubeInfo::clear_has_cube_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CubeInfo::clear_cube_pose() {
  if (cube_pose_ != NULL) cube_pose_->::gazebo::msgs::Pose::Clear();
  clear_has_cube_pose();
}
inline const ::gazebo::msgs::Pose& CubeInfo::cube_pose() const {
  // @@protoc_insertion_point(field_get:cube_info_msgs.msgs.CubeInfo.cube_pose)
  return cube_pose_ != NULL ? *cube_pose_ : *default_instance_->cube_pose_;
}
inline ::gazebo::msgs::Pose* CubeInfo::mutable_cube_pose() {
  set_has_cube_pose();
  if (cube_pose_ == NULL) {
    cube_pose_ = new ::gazebo::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:cube_info_msgs.msgs.CubeInfo.cube_pose)
  return cube_pose_;
}
inline ::gazebo::msgs::Pose* CubeInfo::release_cube_pose() {
  // @@protoc_insertion_point(field_release:cube_info_msgs.msgs.CubeInfo.cube_pose)
  clear_has_cube_pose();
  ::gazebo::msgs::Pose* temp = cube_pose_;
  cube_pose_ = NULL;
  return temp;
}
inline void CubeInfo::set_allocated_cube_pose(::gazebo::msgs::Pose* cube_pose) {
  delete cube_pose_;
  cube_pose_ = cube_pose;
  if (cube_pose) {
    set_has_cube_pose();
  } else {
    clear_has_cube_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:cube_info_msgs.msgs.CubeInfo.cube_pose)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace cube_info_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cube_5finfo_2eproto__INCLUDED
