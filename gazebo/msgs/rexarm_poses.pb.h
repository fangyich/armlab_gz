// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rexarm_poses.proto

#ifndef PROTOBUF_rexarm_5fposes_2eproto__INCLUDED
#define PROTOBUF_rexarm_5fposes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
// @@protoc_insertion_point(includes)

namespace rexarm_poses_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_rexarm_5fposes_2eproto();
void protobuf_AssignDesc_rexarm_5fposes_2eproto();
void protobuf_ShutdownFile_rexarm_5fposes_2eproto();

class RexarmPoses;

// ===================================================================

class RexarmPoses : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rexarm_poses_msgs.msgs.RexarmPoses) */ {
 public:
  RexarmPoses();
  virtual ~RexarmPoses();

  RexarmPoses(const RexarmPoses& from);

  inline RexarmPoses& operator=(const RexarmPoses& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RexarmPoses& default_instance();

  void Swap(RexarmPoses* other);

  // implements Message ----------------------------------------------

  inline RexarmPoses* New() const { return New(NULL); }

  RexarmPoses* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RexarmPoses& from);
  void MergeFrom(const RexarmPoses& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RexarmPoses* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gazebo.msgs.Pose end_effector_pose = 1;
  bool has_end_effector_pose() const;
  void clear_end_effector_pose();
  static const int kEndEffectorPoseFieldNumber = 1;
  const ::gazebo::msgs::Pose& end_effector_pose() const;
  ::gazebo::msgs::Pose* mutable_end_effector_pose();
  ::gazebo::msgs::Pose* release_end_effector_pose();
  void set_allocated_end_effector_pose(::gazebo::msgs::Pose* end_effector_pose);

  // required double base_joint_pos = 2;
  bool has_base_joint_pos() const;
  void clear_base_joint_pos();
  static const int kBaseJointPosFieldNumber = 2;
  double base_joint_pos() const;
  void set_base_joint_pos(double value);

  // required double shoulder_joint_pos = 3;
  bool has_shoulder_joint_pos() const;
  void clear_shoulder_joint_pos();
  static const int kShoulderJointPosFieldNumber = 3;
  double shoulder_joint_pos() const;
  void set_shoulder_joint_pos(double value);

  // required double elbow_joint_pos = 4;
  bool has_elbow_joint_pos() const;
  void clear_elbow_joint_pos();
  static const int kElbowJointPosFieldNumber = 4;
  double elbow_joint_pos() const;
  void set_elbow_joint_pos(double value);

  // required double wrist_joint_pos = 5;
  bool has_wrist_joint_pos() const;
  void clear_wrist_joint_pos();
  static const int kWristJointPosFieldNumber = 5;
  double wrist_joint_pos() const;
  void set_wrist_joint_pos(double value);

  // @@protoc_insertion_point(class_scope:rexarm_poses_msgs.msgs.RexarmPoses)
 private:
  inline void set_has_end_effector_pose();
  inline void clear_has_end_effector_pose();
  inline void set_has_base_joint_pos();
  inline void clear_has_base_joint_pos();
  inline void set_has_shoulder_joint_pos();
  inline void clear_has_shoulder_joint_pos();
  inline void set_has_elbow_joint_pos();
  inline void clear_has_elbow_joint_pos();
  inline void set_has_wrist_joint_pos();
  inline void clear_has_wrist_joint_pos();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Pose* end_effector_pose_;
  double base_joint_pos_;
  double shoulder_joint_pos_;
  double elbow_joint_pos_;
  double wrist_joint_pos_;
  friend void  protobuf_AddDesc_rexarm_5fposes_2eproto();
  friend void protobuf_AssignDesc_rexarm_5fposes_2eproto();
  friend void protobuf_ShutdownFile_rexarm_5fposes_2eproto();

  void InitAsDefaultInstance();
  static RexarmPoses* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RexarmPoses

// optional .gazebo.msgs.Pose end_effector_pose = 1;
inline bool RexarmPoses::has_end_effector_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RexarmPoses::set_has_end_effector_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RexarmPoses::clear_has_end_effector_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RexarmPoses::clear_end_effector_pose() {
  if (end_effector_pose_ != NULL) end_effector_pose_->::gazebo::msgs::Pose::Clear();
  clear_has_end_effector_pose();
}
inline const ::gazebo::msgs::Pose& RexarmPoses::end_effector_pose() const {
  // @@protoc_insertion_point(field_get:rexarm_poses_msgs.msgs.RexarmPoses.end_effector_pose)
  return end_effector_pose_ != NULL ? *end_effector_pose_ : *default_instance_->end_effector_pose_;
}
inline ::gazebo::msgs::Pose* RexarmPoses::mutable_end_effector_pose() {
  set_has_end_effector_pose();
  if (end_effector_pose_ == NULL) {
    end_effector_pose_ = new ::gazebo::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:rexarm_poses_msgs.msgs.RexarmPoses.end_effector_pose)
  return end_effector_pose_;
}
inline ::gazebo::msgs::Pose* RexarmPoses::release_end_effector_pose() {
  // @@protoc_insertion_point(field_release:rexarm_poses_msgs.msgs.RexarmPoses.end_effector_pose)
  clear_has_end_effector_pose();
  ::gazebo::msgs::Pose* temp = end_effector_pose_;
  end_effector_pose_ = NULL;
  return temp;
}
inline void RexarmPoses::set_allocated_end_effector_pose(::gazebo::msgs::Pose* end_effector_pose) {
  delete end_effector_pose_;
  end_effector_pose_ = end_effector_pose;
  if (end_effector_pose) {
    set_has_end_effector_pose();
  } else {
    clear_has_end_effector_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:rexarm_poses_msgs.msgs.RexarmPoses.end_effector_pose)
}

// required double base_joint_pos = 2;
inline bool RexarmPoses::has_base_joint_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RexarmPoses::set_has_base_joint_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RexarmPoses::clear_has_base_joint_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RexarmPoses::clear_base_joint_pos() {
  base_joint_pos_ = 0;
  clear_has_base_joint_pos();
}
inline double RexarmPoses::base_joint_pos() const {
  // @@protoc_insertion_point(field_get:rexarm_poses_msgs.msgs.RexarmPoses.base_joint_pos)
  return base_joint_pos_;
}
inline void RexarmPoses::set_base_joint_pos(double value) {
  set_has_base_joint_pos();
  base_joint_pos_ = value;
  // @@protoc_insertion_point(field_set:rexarm_poses_msgs.msgs.RexarmPoses.base_joint_pos)
}

// required double shoulder_joint_pos = 3;
inline bool RexarmPoses::has_shoulder_joint_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RexarmPoses::set_has_shoulder_joint_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RexarmPoses::clear_has_shoulder_joint_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RexarmPoses::clear_shoulder_joint_pos() {
  shoulder_joint_pos_ = 0;
  clear_has_shoulder_joint_pos();
}
inline double RexarmPoses::shoulder_joint_pos() const {
  // @@protoc_insertion_point(field_get:rexarm_poses_msgs.msgs.RexarmPoses.shoulder_joint_pos)
  return shoulder_joint_pos_;
}
inline void RexarmPoses::set_shoulder_joint_pos(double value) {
  set_has_shoulder_joint_pos();
  shoulder_joint_pos_ = value;
  // @@protoc_insertion_point(field_set:rexarm_poses_msgs.msgs.RexarmPoses.shoulder_joint_pos)
}

// required double elbow_joint_pos = 4;
inline bool RexarmPoses::has_elbow_joint_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RexarmPoses::set_has_elbow_joint_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RexarmPoses::clear_has_elbow_joint_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RexarmPoses::clear_elbow_joint_pos() {
  elbow_joint_pos_ = 0;
  clear_has_elbow_joint_pos();
}
inline double RexarmPoses::elbow_joint_pos() const {
  // @@protoc_insertion_point(field_get:rexarm_poses_msgs.msgs.RexarmPoses.elbow_joint_pos)
  return elbow_joint_pos_;
}
inline void RexarmPoses::set_elbow_joint_pos(double value) {
  set_has_elbow_joint_pos();
  elbow_joint_pos_ = value;
  // @@protoc_insertion_point(field_set:rexarm_poses_msgs.msgs.RexarmPoses.elbow_joint_pos)
}

// required double wrist_joint_pos = 5;
inline bool RexarmPoses::has_wrist_joint_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RexarmPoses::set_has_wrist_joint_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RexarmPoses::clear_has_wrist_joint_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RexarmPoses::clear_wrist_joint_pos() {
  wrist_joint_pos_ = 0;
  clear_has_wrist_joint_pos();
}
inline double RexarmPoses::wrist_joint_pos() const {
  // @@protoc_insertion_point(field_get:rexarm_poses_msgs.msgs.RexarmPoses.wrist_joint_pos)
  return wrist_joint_pos_;
}
inline void RexarmPoses::set_wrist_joint_pos(double value) {
  set_has_wrist_joint_pos();
  wrist_joint_pos_ = value;
  // @@protoc_insertion_point(field_set:rexarm_poses_msgs.msgs.RexarmPoses.wrist_joint_pos)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace rexarm_poses_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rexarm_5fposes_2eproto__INCLUDED
