// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cube_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cube_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cube_info_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CubeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CubeInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cube_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cube_5finfo_2eproto() {
  protobuf_AddDesc_cube_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cube_info.proto");
  GOOGLE_CHECK(file != NULL);
  CubeInfo_descriptor_ = file->message_type(0);
  static const int CubeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeInfo, cube_pose_),
  };
  CubeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CubeInfo_descriptor_,
      CubeInfo::default_instance_,
      CubeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CubeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CubeInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cube_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CubeInfo_descriptor_, &CubeInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cube_5finfo_2eproto() {
  delete CubeInfo::default_instance_;
  delete CubeInfo_reflection_;
}

void protobuf_AddDesc_cube_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cube_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cube_info.proto\022\023cube_info_msgs.msgs\032\n"
    "pose.proto\"<\n\010CubeInfo\022\n\n\002id\030\001 \002(\t\022$\n\tcu"
    "be_pose\030\002 \002(\0132\021.gazebo.msgs.Pose", 112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cube_info.proto", &protobuf_RegisterTypes);
  CubeInfo::default_instance_ = new CubeInfo();
  CubeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cube_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cube_5finfo_2eproto {
  StaticDescriptorInitializer_cube_5finfo_2eproto() {
    protobuf_AddDesc_cube_5finfo_2eproto();
  }
} static_descriptor_initializer_cube_5finfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CubeInfo::kIdFieldNumber;
const int CubeInfo::kCubePoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CubeInfo::CubeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cube_info_msgs.msgs.CubeInfo)
}

void CubeInfo::InitAsDefaultInstance() {
  cube_pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

CubeInfo::CubeInfo(const CubeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cube_info_msgs.msgs.CubeInfo)
}

void CubeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cube_pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CubeInfo::~CubeInfo() {
  // @@protoc_insertion_point(destructor:cube_info_msgs.msgs.CubeInfo)
  SharedDtor();
}

void CubeInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cube_pose_;
  }
}

void CubeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CubeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CubeInfo_descriptor_;
}

const CubeInfo& CubeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cube_5finfo_2eproto();
  return *default_instance_;
}

CubeInfo* CubeInfo::default_instance_ = NULL;

CubeInfo* CubeInfo::New(::google::protobuf::Arena* arena) const {
  CubeInfo* n = new CubeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CubeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cube_info_msgs.msgs.CubeInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cube_pose()) {
      if (cube_pose_ != NULL) cube_pose_->::gazebo::msgs::Pose::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CubeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cube_info_msgs.msgs.CubeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cube_info_msgs.msgs.CubeInfo.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cube_pose;
        break;
      }

      // required .gazebo.msgs.Pose cube_pose = 2;
      case 2: {
        if (tag == 18) {
         parse_cube_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cube_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cube_info_msgs.msgs.CubeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cube_info_msgs.msgs.CubeInfo)
  return false;
#undef DO_
}

void CubeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cube_info_msgs.msgs.CubeInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cube_info_msgs.msgs.CubeInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .gazebo.msgs.Pose cube_pose = 2;
  if (has_cube_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cube_pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cube_info_msgs.msgs.CubeInfo)
}

::google::protobuf::uint8* CubeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cube_info_msgs.msgs.CubeInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cube_info_msgs.msgs.CubeInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .gazebo.msgs.Pose cube_pose = 2;
  if (has_cube_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cube_pose_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cube_info_msgs.msgs.CubeInfo)
  return target;
}

int CubeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cube_info_msgs.msgs.CubeInfo)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_cube_pose()) {
    // required .gazebo.msgs.Pose cube_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cube_pose_);
  }

  return total_size;
}
int CubeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cube_info_msgs.msgs.CubeInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .gazebo.msgs.Pose cube_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cube_pose_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CubeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cube_info_msgs.msgs.CubeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CubeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CubeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cube_info_msgs.msgs.CubeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cube_info_msgs.msgs.CubeInfo)
    MergeFrom(*source);
  }
}

void CubeInfo::MergeFrom(const CubeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cube_info_msgs.msgs.CubeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_cube_pose()) {
      mutable_cube_pose()->::gazebo::msgs::Pose::MergeFrom(from.cube_pose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CubeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cube_info_msgs.msgs.CubeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CubeInfo::CopyFrom(const CubeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cube_info_msgs.msgs.CubeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cube_pose()) {
    if (!this->cube_pose_->IsInitialized()) return false;
  }
  return true;
}

void CubeInfo::Swap(CubeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CubeInfo::InternalSwap(CubeInfo* other) {
  id_.Swap(&other->id_);
  std::swap(cube_pose_, other->cube_pose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CubeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CubeInfo_descriptor_;
  metadata.reflection = CubeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CubeInfo

// required string id = 1;
bool CubeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CubeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CubeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CubeInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& CubeInfo::id() const {
  // @@protoc_insertion_point(field_get:cube_info_msgs.msgs.CubeInfo.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CubeInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cube_info_msgs.msgs.CubeInfo.id)
}
 void CubeInfo::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cube_info_msgs.msgs.CubeInfo.id)
}
 void CubeInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cube_info_msgs.msgs.CubeInfo.id)
}
 ::std::string* CubeInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cube_info_msgs.msgs.CubeInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CubeInfo::release_id() {
  // @@protoc_insertion_point(field_release:cube_info_msgs.msgs.CubeInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CubeInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cube_info_msgs.msgs.CubeInfo.id)
}

// required .gazebo.msgs.Pose cube_pose = 2;
bool CubeInfo::has_cube_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CubeInfo::set_has_cube_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void CubeInfo::clear_has_cube_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void CubeInfo::clear_cube_pose() {
  if (cube_pose_ != NULL) cube_pose_->::gazebo::msgs::Pose::Clear();
  clear_has_cube_pose();
}
const ::gazebo::msgs::Pose& CubeInfo::cube_pose() const {
  // @@protoc_insertion_point(field_get:cube_info_msgs.msgs.CubeInfo.cube_pose)
  return cube_pose_ != NULL ? *cube_pose_ : *default_instance_->cube_pose_;
}
::gazebo::msgs::Pose* CubeInfo::mutable_cube_pose() {
  set_has_cube_pose();
  if (cube_pose_ == NULL) {
    cube_pose_ = new ::gazebo::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:cube_info_msgs.msgs.CubeInfo.cube_pose)
  return cube_pose_;
}
::gazebo::msgs::Pose* CubeInfo::release_cube_pose() {
  // @@protoc_insertion_point(field_release:cube_info_msgs.msgs.CubeInfo.cube_pose)
  clear_has_cube_pose();
  ::gazebo::msgs::Pose* temp = cube_pose_;
  cube_pose_ = NULL;
  return temp;
}
void CubeInfo::set_allocated_cube_pose(::gazebo::msgs::Pose* cube_pose) {
  delete cube_pose_;
  cube_pose_ = cube_pose;
  if (cube_pose) {
    set_has_cube_pose();
  } else {
    clear_has_cube_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:cube_info_msgs.msgs.CubeInfo.cube_pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace cube_info_msgs

// @@protoc_insertion_point(global_scope)
